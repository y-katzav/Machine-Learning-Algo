# -*- coding: utf-8 -*-
"""
Created on Mon Nov 11 14:35:07 2019

@author: Yehuda
"""


import numpy as np


pi = np.array([[0.04, 0.02, 0.06, 0.04, 0.11, 0.11, 0.01, 0.09, 0.03, 0.05, 0.06, 0.11, 0.05, 0.11, 0.03, 0.08]]).T
trans = np.array([ \
    [0.08, 0.02, 0.10, 0.05, 0.07, 0.08, 0.07, 0.04, 0.08, 0.10, 0.07, 0.02, 0.01, 0.10, 0.09, 0.01], \
    [0.06, 0.10, 0.11, 0.01, 0.04, 0.11, 0.04, 0.07, 0.08, 0.10, 0.08, 0.02, 0.09, 0.05, 0.02, 0.02], \
    [0.08, 0.07, 0.08, 0.07, 0.01, 0.03, 0.10, 0.02, 0.07, 0.03, 0.06, 0.08, 0.03, 0.10, 0.10, 0.08], \
    [0.08, 0.04, 0.04, 0.05, 0.07, 0.08, 0.01, 0.08, 0.10, 0.07, 0.11, 0.01, 0.05, 0.04, 0.11, 0.06], \
    [0.03, 0.03, 0.08, 0.10, 0.11, 0.04, 0.06, 0.03, 0.03, 0.08, 0.03, 0.07, 0.10, 0.11, 0.07, 0.03], \
    [0.02, 0.05, 0.01, 0.09, 0.05, 0.09, 0.05, 0.12, 0.09, 0.07, 0.01, 0.07, 0.05, 0.05, 0.11, 0.06], \
    [0.11, 0.05, 0.10, 0.07, 0.01, 0.08, 0.05, 0.03, 0.03, 0.10, 0.01, 0.10, 0.08, 0.09, 0.07, 0.02], \
    [0.03, 0.02, 0.16, 0.01, 0.05, 0.01, 0.14, 0.14, 0.02, 0.05, 0.01, 0.09, 0.07, 0.14, 0.03, 0.01], \
    [0.01, 0.09, 0.13, 0.01, 0.02, 0.04, 0.05, 0.03, 0.10, 0.05, 0.06, 0.06, 0.11, 0.06, 0.03, 0.14], \
    [0.09, 0.03, 0.04, 0.05, 0.04, 0.03, 0.12, 0.04, 0.07, 0.02, 0.07, 0.10, 0.11, 0.03, 0.06, 0.09], \
    [0.09, 0.04, 0.06, 0.06, 0.05, 0.07, 0.05, 0.01, 0.05, 0.10, 0.04, 0.08, 0.05, 0.08, 0.08, 0.10], \
    [0.07, 0.06, 0.01, 0.07, 0.06, 0.09, 0.01, 0.06, 0.07, 0.07, 0.08, 0.06, 0.01, 0.11, 0.09, 0.05], \
    [0.03, 0.04, 0.06, 0.06, 0.06, 0.05, 0.02, 0.10, 0.11, 0.07, 0.09, 0.05, 0.05, 0.05, 0.11, 0.08], \
    [0.04, 0.03, 0.04, 0.09, 0.10, 0.09, 0.08, 0.06, 0.04, 0.07, 0.09, 0.02, 0.05, 0.08, 0.04, 0.09], \
    [0.05, 0.07, 0.02, 0.08, 0.06, 0.08, 0.05, 0.05, 0.07, 0.06, 0.10, 0.07, 0.03, 0.05, 0.06, 0.10], \
    [0.11, 0.03, 0.02, 0.11, 0.11, 0.01, 0.02, 0.08, 0.05, 0.08, 0.11, 0.03, 0.02, 0.10, 0.01, 0.11]])
obs = np.array([[0.01,0.99], \
                [0.58,0.42], \
                [0.48,0.52], \
                [0.58,0.42], \
                [0.37,0.63], \
                [0.33,0.67], \
                [0.51,0.49], \
                [0.28,0.72], \
                [0.35,0.65], \
                [0.61,0.39], \
                [0.97,0.03], \
                [0.87,0.13], \
                [0.46,0.54], \
                [0.55,0.45], \
                [0.23,0.77], \
                [0.76,0.24]])
#0=hot, 1=cold

#tran1=np.array([[.6,.4],[.5,.5]])
#ob1=np.array([[.2,.5],[.4,.4],[.4,.1]]).T
#pi1=np.array([0.8,.1])
#e=[3,1,3]
class Viterbi():
    def __init__(self,pi,trans,obs):
        self.pi=pi
        self.trans=trans
        self.obs=obs
        self.n=len(pi)#number of states (hidden observations)

    def decode(self,o):
        t_=len(o)#number of steps
        
        viterbi=np.zeros([self.n,t_])
        backpointer=np.zeros([self.n,t_])

        for s in range(self.n):
            viterbi[s,0]=pi[s]*self.obs[s,o[0]]#first step each state
            
        for t in range(1,t_):#form 2 step & etc...
            temp=(viterbi[:,t-1]*self.trans.T)
            for k in range(self.n):
                temp[k,:]=temp[k,:]*self.obs[k,o[t]]
            vec=np.argmax(temp,axis=1)
            i=0
            for j in vec:
                viterbi[i,t]=temp[i,j]
                backpointer[i,t]=int(j)
                i+=1

            
#            bestpathpointer.append((np.argmax(viterbi[:,t]),backpointer[np.argmax(viterbi[:,t]),t]))
            
        return backpointer,viterbi





# =============================================================================
# =============================================================================
if __name__ == "__main__":    
    data = [[0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0]]
    a=Viterbi(pi,trans,obs)
    ouput=[]
    for z in range(2):
        bac,p=a.decode(data[z])
        agmx=np.argmax(p,axis=0)
        
        l=9
        result=np.ones([1,10])
        index=agmx[9]
        while l>=0:
            result[0,l]=int(index)
            index=bac[int(index),l]
            
            l-=1
        ouput.append(result)
    ouput[0] ==[11, 10, 15, 10, 15, 10, 0, 10, 0, 0]
    ouput[1] ==[5, 14, 10, 15, 0, 0, 14, 10, 15, 10]    
  
#    mxa=0
#    index=[]
#    for i in range(16):
#        for j in range(16):
#            if p[i,j]>mxa:
#                mxa=p[i,j]
#                index.append((i,j))